/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */


CREATE TABLE USERS(
    ID  VARCHAR(36) PRIMARY KEY,
    USERNAME VARCHAR(255) UNIQUE NOT NULL,
    EMAIL VARCHAR(255) UNIQUE NOT NULL,
    IS_ACTIVE NUMERIC(1) DEFAULT 1,
    CREATED_AT TIMESTAMP,
    UPDATED_AT TIMESTAMP
);

CREATE TABLE CREDENTIALS(
    ID VARCHAR(36) PRIMARY KEY,
    USERNAME VARCHAR(255) UNIQUE NOT NULL,
    PASSWORD VARCHAR(255),
    PIN VARCHAR(8),
    IDENTIFICATION_NUMBER VARCHAR(255),
    TRADE_NAME VARCHAR(255),
    LOCALIZATION VARCHAR(255),
    ACTIVITY_CODE VARCHAR(255),
    ECONOMIC_ACTIVITY VARCHAR(255),
    IDENTIFICATION_TYPE VARCHAR(1),
    KEYSTORE BYTEA,
    BRAND_IMAGE BYTEA,
    CREATED_AT TIMESTAMP,
    UPDATED_AT TIMESTAMP
);

CREATE TABLE BRANCHES
(
    ID   VARCHAR(36) PRIMARY KEY,
    BRANCH_NUMBER NUMERIC NOT NULL,
    NAME VARCHAR(255) UNIQUE,
    ADDRESS VARCHAR(255) NOT NULL,
    PHONE VARCHAR(34) NOT NULL,
    EMAIL VARCHAR(255) NOT NULL,
    CREDENTIAL_ID VARCHAR (36),
    DESCRIPTION VARCHAR(255),
    CREATED_AT TIMESTAMP,
    UPDATED_AT TIMESTAMP,
    FOREIGN KEY (CREDENTIAL_ID) REFERENCES CREDENTIALS(ID)
);

CREATE TABLE CASH_REGISTERS
(
    ID VARCHAR(36) PRIMARY KEY,
    BRANCH_ID VARCHAR (36),
    CASH_REGISTER_NUMBER NUMERIC NOT NULL,
    CREATED_AT TIMESTAMP,
    UPDATED_AT TIMESTAMP,
    FOREIGN KEY (BRANCH_ID) REFERENCES BRANCHES(ID)
);

CREATE TABLE CUSTOMERS
(
    ID VARCHAR(36) PRIMARY KEY,
    IDENTIFICATION_NUMBER VARCHAR(36) UNIQUE,
    IDENTIFICATION_TYPE VARCHAR(10),
    CUSTOMER_NAME VARCHAR(100),
    FIRST_LAST_NAME VARCHAR(100),
    SECOND_LAST_NAME VARCHAR(100),
    ADDRESS VARCHAR(100),
    PHONE_NUMBER VARCHAR(30),
    CREATED_AT TIMESTAMP,
    UPDATED_AT TIMESTAMP
);

CREATE SEQUENCE SECURITY_CODE_SEQ
    START WITH 00000000
    INCREMENT BY 1
    MAXVALUE 99999999
    MINVALUE 00000000
    CYCLE;

CREATE TABLE INVOICES
(
    ID VARCHAR(36) PRIMARY KEY,
    INVOICE_TYPE NUMERIC(2),
    INVOICE_NUMBER VARCHAR(20),
    BRANCH_ID VARCHAR (36),
    CUSTOMER_ID VARCHAR (36),
    CURRENCY VARCHAR(36),
    STATUS VARCHAR(36),
    PAYMENT_METHOD VARCHAR(10),
    HACIENDA_KEY VARCHAR(50),
    FOREIGN KEY (BRANCH_ID) REFERENCES BRANCHES(ID),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(ID),
    CREATED_AT TIMESTAMP,
    UPDATED_AT TIMESTAMP
);

CREATE TABLE PRODUCTS
(
    ID VARCHAR(36) PRIMARY KEY,
    UNIT VARCHAR(10),
    CABYS VARCHAR(13),
    DESCRIPTION VARCHAR(255),
    TAX VARCHAR(10),
    PRICE NUMERIC(18,5),
    CREATED_AT TIMESTAMP,
    UPDATED_AT TIMESTAMP
);

CREATE TABLE INVOICE_ITEMS
(
    INVOICE_ID VARCHAR(36),
    PRODUCT_ID VARCHAR(36),
    QUANTITY NUMERIC(16,3) NOT NULL,
    CREATED_AT TIMESTAMP,
    UPDATED_AT TIMESTAMP,
    FOREIGN  KEY (INVOICE_ID) REFERENCES INVOICES(ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(ID),
    PRIMARY KEY(INVOICE_ID,PRODUCT_ID)

);

CREATE TABLE USERS_BRANCHES(
    USER_ID VARCHAR(36),
    BRANCH_ID VARCHAR(36),
    ACCESS_TYPE VARCHAR(32),
    CREATED_AT TIMESTAMP,
    UPDATED_AT TIMESTAMP,
    PRIMARY KEY (USER_ID, BRANCH_ID),
    FOREIGN KEY (BRANCH_ID) REFERENCES BRANCHES(ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE USERS_CREDENTIALS(
    USER_ID VARCHAR(36),
    CREDENTIAL_ID VARCHAR(36),
    CREATED_AT TIMESTAMP,
    UPDATED_AT TIMESTAMP,
    PRIMARY KEY (USER_ID, CREDENTIAL_ID),
    FOREIGN KEY (CREDENTIAL_ID) REFERENCES CREDENTIALS(ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

